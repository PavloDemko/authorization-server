#%RAML 1.0
title: authorization-server
mediaType:  application/json
version: v1

types:
  User:
    type: object
    properties:
      firstName: string
      lastName: string
  AuthorizationInfo:
    type: object
    properties:
      access_token: string
      expires_in:
        description: |
          This is a expiration date of acccess token in seconds
        type: integer
        default: 8640
        minimum: 8640
      refresh_token:
        type: string
        required: false
      token_type:
        type: string
        enum: ['Bearer']
        default: 'Bearer'
  Authentication:
    type: object
    properties:
      email:
        type: string
        required: true
      password:
        type: string
        minLength: 6
        required: true

traits:
  scopeHeader:
    headers:
      X-OAuth-Scopes:
        description: |
          This is scope header for access
        required: true
        example: articles:read,my_profile

resourceTypes:
  socialSignIn:
    description: This is ResourceType for social signing in
    get:
      description: |
        Use this endpoint to authenticate a user with a social provider.
      responses:
        302:
          body:
            example: "Social provider sign in form."
  callback:
    get:
      description: |
        It is redirecUrl that will redirect to successCallback or failureCallback endpoints.
      queryParameters:
        code:
          type: string
          required: true
  successCallback:
    get:
      description: |
        This endpoint is for success response from social provider. It will redirect user to your website with all required fields in queryString.
      responses:
        302:
          body:
            example: <<example>>
  failureCallback:
    get:
      description: |
        This endpoint is for failure response from social provider. It will redirect user to your website.
      responses:
        302:
          body:
            example: <<example>>

/v1/oauth/token:
  post:
    description: |
      This is the OAuth 2.0 grant that highly trusted apps utilize in order to access an API.
      In this flow the end-user is asked to fill in credentials (username/password)
      typically using an interactive form in the user-agent (browser).
      This information is sent to the backend and from there to authorization server.
      It is therefore imperative that the client is absolutely trusted with this information.
      For client side applications and mobile apps we recommend using web flows instead.
    body:
      application/json:
        schema: !include v1/oauth/token/post/body/schema.json
        example: !include v1/oauth/token/post/body/example.json
    responses:
      200:
        body:
          schema: !include v1/oauth/token/post/responses/200/schema.json
          example: !include v1/oauth/token/post/responses/200/example.json
      401:
        body:
          example: !include v1/oauth/token/post/responses/401/example.json

/v1/oauth/access_token:
  post:
    description: |
      This is the OAuth 2.0 grant that highly trusted apps utilize in order to access an API.
      In this flow the user-agent should provide access token.
      This information is sent to the backend and from there to authorization server.
      It is therefore imperative that the client is absolutely trusted with this information.
    body:
      application/json:
        schema: !include v1/oauth/access_token/post/body/schema.json
        example: !include v1/oauth/access_token/post/body/example.json
    responses:
      200:
        body:
          schema: !include v1/oauth/access_token/post/responses/200/schema.json
          example: !include v1/oauth/access_token/post/responses/200/example.json
      401:
        body:
          example: !include v1/oauth/access_token/post/responses/401/example.json

/v1/oauth/facebook:
  type: socialSignIn
  /callback:
    type: callback
  /success-callback:
    type:
      successCallback:
        example: "Your url will be like \"yourWebsite.com?...\""
  /failure-callback:
    type:
      failureCallback:
        example: "Your url will be like \"yourWebsite.com?failureMessage=Can't sign in with Facebook\""

/v1/oauth/linkedin:
  type: socialSignIn
  /callback:
    type: callback
  /success-callback:
    type:
      successCallback:
        example: "Your url will be like \"yourWebsite.com?...\""
  /failure-callback:
    type:
      failureCallback:
        example: "Your url will be like \"yourWebsite.com?failureMessage=Can't sign in with LinkedIn\""

/v1/oauth/refresh:
  post:
    description: |
      Use this endpoint to refresh an access token, using the refresh token you got during authorization.
    body:
      application/json:
        type: object
        properties:
          grant_type:
            description: |
              Denotes the flow you are using. To refresh a token use "refresh_token".
            type: string
            enum: ["refresh_token"]
            default: "refresh_token"
            required: true
          client_id:
            description: |
              Your application's Client ID.
            type: string
            required: true
          client_secret:
            description: |
              Your application's Client Secret.
            type: string
            required: true
          refresh_token:
            description: |
              The refresh token to use.
            type: string
            required: true
        example: |
          {
            "grant_type": "refresh_token",
            "client_id": "3QBfya9tLgZ0uuTZ20KiYnz4DY4B9O-k",
            "client_secret": "LveswyAl8MVrdASqR3JQt2n-cNzWDMezPwvLWKj3dGISYOVDgYeT-2Dj2-a_JShi",
            "refresh_token": "YOUR_REFRESH_TOKEN"
          }
    responses:
      200:
        body:
          application/json:
            type: AuthorizationInfo
            example: |
              {
                "access_token": "eyJz93a...k4laUWw",
                "token_type": "Bearer",
                "expires_in": 86400
              }

/v1/oauth/revoke:
  post:
    description: |
      Since refersh tokens never expire, you need to have a way to invalidate them in case they are compromised or you no longer need them.
      You can do use using this endpoint.
    body:
      application/json:
        type: object
        properties:
          token:
            description: |
              The refresh token you want to revoke.
            type: string
            required: true
          client_id:
            description: |
              Your application's Client ID. The client should match the one the refresh token was issued for.
            type: string
            required: true
          client_secret:
            description: |
              Your application's Client Secret. Required for confidential clients.
            type: string
            required: true
        example: |
          {
            "client_id": "3QBfya9tLgZ0uuTZ20KiYnz4DY4B9O-k",
            "client_secret": "LveswyAl8MVrdASqR3JQt2n-cNzWDMezPwvLWKj3dGISYOVDgYeT-2Dj2-a_JShi",
            "token": "YOUR_REFRESH_TOKEN"
          }
    responses:
      200:
        body:
          application/json:
            example: |
              {
                "refresh_token": "YOUR_REFRESH_TOKEN"
              }

/v1/sign_up:
  post:
    description: |
      Given a user's credentials this endpoint will create a new user using active authentication.
    body:
      application/json:
        schema: !include v1/sign_up/post/body/schema.json
        example: !include v1/sign_up/post/body/example.json
    responses:
      200:
        body:
          application/json:
            example: !include v1/sign_up/post/responses/200/example.json

/v1/change_password:
  post:
    description: |
      Given a user's email address, authorization server will change password.
    body:
      application/json:
        type: object
        properties:
          client_id:
            description: |
              The "client_id" of your client.
            type: string
            required: true
          email:
            description: |
              The user's email address.
            type: string
            required: true
          password:
            description: |
              The new password.
            type: string
            required: true
        example: |
          {
            "client_id": "YOUR_CLIENT_ID",
            "email": "USER_EMAIL",
            "password": "USER_PASSWORD"
          }
    responses:
      200:
        body:
          application/json:
            example: |
              {
                "user_id": "58457fe6b27..."
              }

/v1/user_info:
  get:
    description: |
      Given the authorization server access token obtained during login,
      this endpoint returns a user's profile.
      This endpoint will work only if *openid* was granted as a scope for the *access_token*.
    queryParameters:
      access_token:
        description: |
          The authorization server *access_token* obtained during login.
        type: string
        required: true
        minLength: 5
    responses:
      200:
        body:
          example: !include v1/user_info/get/responses/200/example.json
